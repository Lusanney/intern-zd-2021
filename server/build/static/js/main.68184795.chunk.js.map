{"version":3,"sources":["apis/ticket.api.js","utils/DateUtil.js","utils/StatusBadgeBg.js","components/TicketTable/Table.view.jsx","components/Pagination/index.jsx","components/ErrorBoundary/index.jsx","components/TicketTable/index.jsx","pages/Dashboard/index.jsx","pages/TicketDetail/TicketEmpty.view.jsx","pages/TicketDetail/TicketDetail.view.jsx","pages/TicketDetail/index.jsx","components/Navbar/index.jsx","pages/Error/404.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["getAllTicketsAPI","perPage","page","a","axios","get","params","response","getTicketByIdAPI","id","formatDate","dateString","Date","toLocaleString","StatusBadgeBg","open","pending","solved","badgeBg","status","TicketTableView","tickets","history","useHistory","className","data-testid","scope","map","ticket","onClick","push","subject","requester_id","updated_at","React","memo","Pagination","currentPage","lastPage","onPageClick","pageButtons","idx","aria-label","type","ErrorBoundary","props","state","hasError","error","errorInfo","console","this","children","Component","TicketTable","useState","getTickets","setTickets","getCurrentPage","setCurrentPage","getLastPage","setLastPage","useEffect","then","data","Math","floor","count","Dashboard","TicketEmpty","to","TicketDetailView","isLoading","Object","keys","length","created_at","style","textJustify","description","TicketDetail","ticketId","useParams","getTicket","setTicket","getLoading","setLoading","finally","Navbar","backgroundColor","viewBox","width","fill","d","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","NotFoundPage","App","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.68184795.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport const getAllTicketsAPI = async (perPage, page) => {\r\n  const response = await axios.get('/api/v1/tickets', {\r\n    params: {\r\n      perPage,\r\n      page,\r\n    },\r\n  });\r\n\r\n  return response;\r\n};\r\n\r\nexport const getTicketByIdAPI = async (id) => {\r\n  const response = await axios.get(`/api/v1/tickets/${id}`);\r\n\r\n  return response;\r\n};\r\n","/**\n * Format the date into readable format\n * @param {string} dateString\n */\nconst formatDate = (dateString) => {\n  const date = new Date(dateString);\n\n  return date.toLocaleString();\n};\n\nexport default formatDate;\n","/**\n * Bootstrap color mapping based on tiket status\n */\nconst StatusBadgeBg = {\n  open: 'bg-danger',\n  pending: 'bg-primary',\n  solved: 'bg-success',\n};\n\n/**\n * Translate ticket status to Bootstrap color classname\n * @param {string} status\n */\nconst badgeBg = (status) => StatusBadgeBg[status];\n\nexport default badgeBg;\n","import React from 'react';\nimport './Table.css';\nimport { useHistory } from 'react-router-dom';\nimport { formatDate, badgeBg } from '../../utils';\n\nconst TicketTableView = ({ tickets }) => {\n  const history = useHistory();\n  return (\n    <table className=\"table table-hover ticket-table\" data-testid=\"ticket-table\">\n      <thead>\n        <tr>\n          <th scope=\"col\">ID</th>\n          <th scope=\"col\">Status</th>\n          <th scope=\"col\">Subject</th>\n          <th scope=\"col\">Requester</th>\n          <th scope=\"col\">Requester updated</th>\n        </tr>\n      </thead>\n      <tbody>\n        {tickets.map((ticket) => (\n          <tr key={ticket.id} onClick={() => history.push(`/ticket/${ticket.id}`)}>\n            <th scope=\"row\">{ticket.id}</th>\n            <th scope=\"col\">\n              <span className={`badge rounded-pill ms-3 px-4 ${badgeBg(ticket.status)}`}>\n                {ticket.status}\n              </span>\n            </th>\n            <td>{ticket.subject}</td>\n            <td>{ticket.requester_id}</td>\n            <td>{formatDate(ticket.updated_at)}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\nexport default React.memo(TicketTableView);\n","/* eslint-disable no-unused-vars */\n/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from 'react';\n\n/**\n * Pagination Component\n */\nconst Pagination = ({ currentPage, lastPage, onPageClick }) => {\n  // Calculating the list of page numbers button to be visible\n  const pageButtons = [];\n  for (let idx = currentPage - 2; idx <= currentPage + 2 && idx <= lastPage; idx++) {\n    if (idx < 1) { continue; }\n    pageButtons.push(idx);\n  }\n\n  return (\n    <nav aria-label=\"...\">\n      <ul className=\"pagination\">\n\n        <li className=\"page-item\">\n          <button className=\"page-link\" type=\"button\" onClick={() => onPageClick(1)}>«</button>\n        </li>\n\n        <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>\n          <button className=\"page-link\" type=\"button\" onClick={() => onPageClick(currentPage - 1)}>‹</button>\n        </li>\n\n        {/* Showing all the page numbers button */}\n        {pageButtons.map((page) => (\n          <li className={`page-item ${page === currentPage ? 'active' : ''}`} key={page}>\n            <button className=\"page-link\" type=\"button\" onClick={() => onPageClick(page)}>{page}</button>\n          </li>\n        ))}\n\n        <li className={`page-item page-item-dynamic ${currentPage === lastPage ? 'disabled' : ''}`}>\n          <button className=\"page-link\" type=\"button\" onClick={() => onPageClick(currentPage + 1)}>›</button>\n        </li>\n\n        <li className=\"page-item\">\n          <button className=\"page-link\" type=\"button\" onClick={() => onPageClick(lastPage)}>»</button>\n        </li>\n      </ul>\n    </nav>\n\n  );\n};\n\nexport default React.memo(Pagination);\n","/* eslint-disable react/destructuring-assignment */\nimport React from 'react';\n\n/**\n * Wrapper class to catch application error\n */\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError() {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // log error if caught\n    console.error(error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { useEffect, useState } from 'react';\nimport { getAllTicketsAPI } from '../../apis/ticket.api';\nimport Table from './Table.view';\nimport Pagination from '../Pagination';\nimport ErrorBoundary from '../ErrorBoundary';\n\n/**\n * TicketTable shows the table with tickets\n */\nconst TicketTable = () => {\n  const [getTickets, setTickets] = useState([]);\n  const [getCurrentPage, setCurrentPage] = useState(1);\n  const [getLastPage, setLastPage] = useState(1);\n  const perPage = 25;\n\n  useEffect(() => {\n    getAllTicketsAPI(perPage, getCurrentPage)\n      .then((response) => {\n        if (response.data) {\n          setTickets(response.data.tickets);\n          setLastPage(Math.floor((response.data.count - 1) / perPage) + 1);\n        }\n      });\n  }, [getCurrentPage]);\n\n  return (\n    <ErrorBoundary>\n      <Table tickets={getTickets} />\n      <Pagination\n        currentPage={getCurrentPage}\n        lastPage={getLastPage}\n        onPageClick={(page) => setCurrentPage(page)}\n      />\n    </ErrorBoundary>\n  );\n};\n\nexport default React.memo(TicketTable);\n","import React from 'react';\nimport TicketTable from '../../components/TicketTable';\n\n/**\n * Dashboard page, where showing ticket tables\n */\nconst Dashboard = () => (\n  <section className=\"Dashboard mt-5\">\n    <h1 className=\"mb-5\">Ticket table for tickets at lusanney.zendesk.com</h1>\n    <TicketTable />\n  </section>\n);\n\nexport default React.memo(Dashboard);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\n/**\n * TicketEmpty view shows UI when the ticket is not found\n */\nconst TicketEmpty = () => (\n  <section className=\"TicketDetail mt-5\">\n    <h1>Sorry, the ticket you are looking for is not found</h1>\n    <h3>\n      Please go back to Dashboard with the link:\n\n      <Link to=\"/\" className=\"ms-3 btn btn-outline-primary\" data-testid=\"go-dashboard\">Dashboard</Link>\n    </h3>\n  </section>\n\n);\n\nexport default TicketEmpty;\n","import React from 'react';\nimport { formatDate, badgeBg } from '../../utils';\nimport TicketEmpty from './TicketEmpty.view';\n\n/**\n * TicketDetail view, shows all the ticket details when\n * ticket data is not empty\n */\nconst TicketDetailView = ({ ticket, isLoading }) => {\n  const isTicketFound = Object.keys(ticket).length !== 0;\n\n  return (\n    isTicketFound || isLoading ? (\n      <section className=\"TicketDetail mt-5\">\n\n        <div className=\"row\">\n          <h2 data-testid=\"ticket-subject\">{ticket.subject}</h2>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col-md-4\">\n            <div className=\"requester-group-badge\">\n              Requester:\n              {' '}\n              <span data-testid=\"ticket-requester\">\n\n                {ticket.requester_id}\n\n              </span>\n              <span data-testid=\"ticket-status\" className={`badge rounded-pill ms-3 px-4 ${badgeBg(ticket.status)}`}>\n                {ticket.status}\n              </span>\n            </div>\n          </div>\n\n          <div className=\"col\" data-testid=\"ticket-createdAt\">\n            Created:\n            {' '}\n            {formatDate(ticket.created_at)}\n          </div>\n        </div>\n\n        <div className=\"row mt-3\">\n          <div className=\"col-6\">\n            <b>Description</b>\n            <p style={{ textJustify: 'auto' }} data-testid=\"ticket-description\">{ticket.description}</p>\n          </div>\n\n        </div>\n\n      </section>\n    ) : <TicketEmpty />\n  );\n};\n\nexport default React.memo(TicketDetailView);\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getTicketByIdAPI } from '../../apis/ticket.api';\nimport ErrorBoundary from '../../components/ErrorBoundary';\nimport TicketDetailView from './TicketDetail.view';\n\n/**\n * TicketDetail page, where showing Ticket details\n */\nconst TicketDetail = () => {\n  // Id of the ticket based on URL\n  const { ticketId } = useParams();\n  const [getTicket, setTicket] = useState({});\n\n  // Loading state\n  const [getLoading, setLoading] = useState(true);\n\n  useEffect(() => {\n    setLoading(true);\n    getTicketByIdAPI(ticketId)\n      .then((response) => {\n        if (response.data) {\n          setTicket(response.data.ticket);\n        }\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, [ticketId]);\n\n  return (\n    <ErrorBoundary>\n      <TicketDetailView ticket={getTicket} isLoading={getLoading} />\n    </ErrorBoundary>\n\n  );\n};\n\nexport default React.memo(TicketDetail);\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Navbar = () => (\r\n  <nav className=\"navbar navbar-expand-lg navbar-dark\" style={{ backgroundColor: '#03363D' }}>\r\n    <div className=\"container-fluid\">\r\n\r\n      <Link className=\"navbar-brand\" to=\"/\">\r\n        <span className=\"me-3\">\r\n          <svg id=\"ember1569\" className=\"ember-view ms-4\" viewBox=\"0 0 26 26\" style={{ width: 40 }}>\r\n            <path fill=\"currentColor\" d=\"M12 8.2v14.5H0zM12 3c0 3.3-2.7 6-6 6S0 6.3 0 3h12zm2 19.7c0-3.3 2.7-6 6-6s6 2.7 6 6H14zm0-5.2V3h12z\" />\r\n          </svg>\r\n        </span>\r\n\r\n        <span className=\"ml-3\">Zendesk Intern</span>\r\n\r\n      </Link>\r\n\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\" />\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n        <ul className=\"navbar-nav me-auto\">\r\n          <li className=\"nav-item\">\r\n            <Link className=\"nav-link active\" to=\"/\">Dashboard</Link>\r\n          </li>\r\n        </ul>\r\n\r\n        <span className=\"navbar-text\">\r\n          <h5>Quang Van, Tran (Lusanney)</h5>\r\n        </span>\r\n      </div>\r\n    </div>\r\n  </nav>\r\n);\r\n\r\nexport default React.memo(Navbar);\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst NotFoundPage = () => (\r\n  <section className=\"mt-5\">\r\n    <h1>404 - NOT FOUND</h1>\r\n    <h2>The page you are looking for is not found</h2>\r\n    <h2>\r\n      Please go back to Dashboard with the link:\r\n\r\n      <Link to=\"/\" className=\"ms-3 btn btn-outline-primary\" data-testid=\"go-dashboard\">Dashboard</Link>\r\n    </h2>\r\n  </section>\r\n);\r\n\r\nexport default NotFoundPage;\r\n","import React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from 'react-router-dom';\r\n\r\nimport Dashboard from './pages/Dashboard';\r\nimport TicketDetail from './pages/TicketDetail';\r\nimport Navbar from './components/Navbar';\r\nimport NotFoundPage from './pages/Error/404';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Navbar />\r\n        <div className=\"container\">\r\n\r\n          <Switch>\r\n            <Route path=\"/ticket/:ticketId\" exact>\r\n              <TicketDetail />\r\n            </Route>\r\n\r\n            <Route path=\"/\" exact>\r\n              <Dashboard />\r\n            </Route>\r\n\r\n            <Route path=\"*\">\r\n              <NotFoundPage />\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n\r\n      </div>\r\n    </Router>\r\n\r\n  );\r\n}\r\n\r\nexport default React.memo(App);\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}